<pre class='metadata'>
Title: Proposal for RespImg Syntax
Status: w3c/UD
ED: http://tabatkins.github.io/specs/respimg/Overview.html
Shortname: respimg
Level: 1
Editor: Tab Atkins, Google, http://xanthir.com/contact/
Abstract: This document describes a proposed syntax for "responsive images", which allows a user agent to choose an appropriate version of an image from several candidates.
Ignored Terms: <media-query>
Mailing List: public-respimg@w3.org
Mailing List Archives: http://lists.w3.org/Archives/Public/public-respimg/
Warning: replaced by http://picture.responsiveimages.org/
</pre>

<h2 id='intro'>
Introduction</h2>

	The Responsive Images community has been trying for some time to come up with a syntax for specifying responsive images
	that satisfies multiple use-cases.
	Their most popular attempt so far,
	the <code>&lt;picture></code> element,
	only hits 2 of the 3 major use-cases,
	and has certain aspects that implementors seem to be rather unhappy with.

	This document defines a new attempt at the problem,
	sketched out in collaboration between me and John Mellor,
	which solves all three of the major use-cases,
	while avoiding implementor concerns,
	and hopefully being very easily usable.

<h2 id='problem'>
The Problem Statement</h2>

	To make things somewhat clearer,
	I'll outline here the three use-cases that the responsive images community has been attempting to address.

	<ol>
		<li>
			<dfn title="resolution">Resolution-based discrimination</dfn> - providing the same image in multiple resolutions,
			so that high-res devices can get the prettiest picture,
			while low-res or low-bandwidth devices can avoid wasting time and bandwidth with overly-large files.

		<li>
			<dfn title="art-direction">Art-direction discrimination</dfn> - as the screen size changes,
			so might your page's design.
			A large, detailed image might be appropriate for the desktop design,
			but just scaling it down for a small phone's screen results in a tiny, cluttered image.
			Instead, you may want to provide alternate images,
			cropped differently to better fit the small screen
			and still show the most important parts of the image at an appropriate size.

		<li>
			<dfn title="viewport">Variable-size resolution discrimination</dfn> -
			sometimes the image you're serving is variable-sized:
			either based on the size of the viewport
			or just different sizes at different breakpoints.
			A combination of the solutions to the above two problems <em>can</em> address this,
			but very verbosely -
			you have to do math to figure out breakpoints
			(not intrinsically related to your site's breakpoints)
			and repeat urls multiple times.
			For example, a 1000px wide image might be appropriate as a 1x image
			when used to fill the background of the page on a desktop screen,
			but it's far too large to use for the same purpose on a 320px wide screen.
			On a screen that small, it's more like a 2x or 3x image.
	</ol>

	In addition, there's a strong requirement that the solution be friendly to the browser's preloader,
	which scans the document for urls to start downloading quickly,
	as the connection delay is a huge factor in the feeling of "slow" sites on mobile devices,
	and so starting the connection as early as possible is a big win in perceived performance.
	This limits what kind of information you can rely on,
	as the preloader only has access to a small amount of data from the page.

<h2 id='syntax'>
The Syntax Proposal</h2>

	Add a set of attributes to <code>&lt;img></code>,
	named <code>src-1</code>, <code>src-2</code>, etc.
	Collectively,
	these are the <dfn export title="src-N | src-N attribute">src-N attributes</dfn>

	When loading an image,
	these attributes are consulted first,
	in numerical order.
	If none of them are valid or match,
	then the plain <code>src</code> attribute is used to load the image.

	Note: It's possible to integrate <code>srcset</code> into this if necessary,
	but it would be nice to avoid doing that.
	This completely replaces the <code>srcset</code> funtionality.

	The grammar for the attributes is:

	<pre>
		<dfn>&lt;src-n-attribute></dfn> = <<media-query>>? [ <<x-based-urls>> | <<viewport-urls>> ]
		<dfn>&lt;x-based-urls></dfn> = [ <<url>> <<resolution>>? ]#

		<dfn>&lt;viewport-urls></dfn> = <<size-viewport-list>> ; <<size-based-urls>>
		<dfn>&lt;size-viewport-list></dfn> = <<image-size>> [ ( <<viewport-size>> ) <<image-size>> ]*
		<dfn>&lt;image-size></dfn> = <<length>> | <<percentage>>
		<dfn>&lt;viewport-size></dfn> = <<length>>
		<dfn>&lt;size-based-urls></dfn> = [ <<url>> <<integer>> ]#
	</pre>

	The above grammar must be interpreted per the grammar definition in [[!CSS3VAL]].
	For the purposes of the above grammar,
	the <<url>> production is simply any sequence of non-<a spec=css-syntax>whitespace</a> characters
	that does not end in a comma or semicolon.
	All other terminal productions are defined as per CSS.

	The terms and use of this grammar are explained further in the following sections.

	Note: Any explanations of how the attributes and their values are processed that appear in this section are <em>non-normative</em>.
	The normative definition of the processing model is in the "Processing" section.

<h3 id='media-queries'>
Art Direction</h3>

	To solve the basic <a>art-direction</a> use-case,
	the <a>src-N attributes</a> allow a media query to be provided at the beginning of their value.

	<p class='issue'>
		I want just the second clause of the <code>media_query</code> grammar in Media Queries 4,
		where you have "(foo:bar) and (baz:qux)" and that's it.
		I should go fix the grammar section there to expose this more cleanly.

	Each valid <a>src-N attribute</a> is checked in numerical order,
	and the first one to have a matching media query
	(or no media query at all)
	is chosen as the source of candidate urls for this <code>&lt;img></code>.

	<div class='example'>
		The following three crops of the same image can be used on various screen sizes,
		where different designs call for different image shapes and sizes:

		<figure>
			<img src="images/difimages.jpg" alt="Three crops of the same image. The first shows President Obama talking to a soldier in hospital scrubs. The second is zoomed out, showing more soldiers standing around them.  The third is zoomed out even further, showing even more soldiers and more of the hospital room.">
		</figure>

		These could be referenced like:

		<pre class="lang-markup">
			&lt;img src-1="(max-width: 400px) pic-small.jpg"
			     src-2="(max-width: 1000px) pic-medium.jpg"
			     src="pic-large.jpg"
			     alt="Obama talking to a soldier in hospital scrubs.">
		</pre>

		Note: Putting the final url into a <code>src</code> attribute like that isn't required;
		in fact, if using any of the more advanced pieces of this feature,
		like multiple resolutions,
		it would <em>have</em> to be in a <a>src-N attribute</a>
		(using <code>src-3</code> would be most appropriate here).
		Still, having a final fallback in <code>src</code> is a good idea,
		as it means that down-level browsers will still be able to correctly download the image.
	</div>

	Note: This feature is intended to be used with <em>distinct</em> images.
	Look at the "Viewport" subsection about choosing among multiple copies of the <em>same</em> image
	based on viewport size.

<h3 id='resolution'>
Resolution</h3>

	To solve the <a>resolution</a> use-case,
	the <a>src-N attributes</a> allow multiple urls to be provided,
	each with an indicator of their resolution
	(the ratio of image pixels to CSS pixels).

	Instead of a single url,
	simply provide a comma-separated list of urls/resolution pairs,
	where each pair is a url, followed by whitespace, followed by a CSS <<resolution>> value.
	A url provided without a <<resolution>> is assumed to be at ''1x'' resolution.

	<p class='issue'>
		Assume that I've already edited Images 4 appropriately so that ''x'' is a valid resolution unit,
		equivalent to ''dppx''.

	<div class='example'>
		For example, the following code provides the same image at three different resolutions:
		one at "normal size",
		where each image pixel maps to one CSS pixel;
		one "high-res",
		which is double the size but meant to be displayed with two image pixels for every one CSS pixel;
		and one "low-res",
		which is half the size,
		intended for low-bandwidth situations.

		<pre class="lang-markup">
			&lt;img src-1="pic.png, picHigh.png 2x, picLow.png .5x">
		</pre>
	</div>

	The choice of which image to load is left to the user agent,
	based on its knowledge of the screen's pixel density,
	the device's bandwidth,
	and whatever other factors it deems relevant to the decision.

	The intrinsic size of the chosen image is equal to the actual number of image pixels in each dimension,
	divided by the chosen resolution multiplier,
	in CSS px units.
	For example, if "pic1.png 2x" is chosen, and is 100 pixels wide,
	its intrinsic size is ''50px''.

<h3 id='variable-size'>
Variable-Sized Images</h3>

	The previous section on resolution discrimination had a hidden assumption which may not always be true:
	that the image being presented is meant to be a single, static size.
	That is, regardless of the size of the screen, the image will always be, say, 400px wide.

	This assumption is not always true.
	There are two major reasons why this may be so:

	<ul>
		<li>
			The image's size may be specified as a percentage of the viewport's width.
			For example, it may be screen-filling (100%),
			or it may fill a column in a two-column layout (50%).

		<li>
			The image's size may vary with your page's breakpoints,
			as it gets placed in different layouts.
			For example,
			you may have a single-column layout on small screens,
			having the image fill that column (100%),
			but switch to a grid with fixed-size items in it on larger screens (400px).
	</ul>

	Either of these issues can be addressed with Media Queries,
	but it gets complicated when resolution discrimination is mixed in -
	if you're displaying the same image at a variety of sizes,
	a particular image file may be appropriate as a ''1x'' image on large screens,
	but would also serve perfectly well as a ''2x'' image on smaller screens.
	Dealing with this requires you to repeat urls multiple times,
	and can require some non-trivial math.
	(See <a href="#bad-example-multisize">the next example</a> for a simple demonstration of the code bloat.)
	Further, the code so produced is not actually forward-compatible, either -
	it'll act badly when even higher-density screens arrive,
	unless you further bloat the syntax by pre-emptively writing out higher-density versions.

	To avoid these issues,
	this specification defines a <strong>shortcut syntax</strong>
	to address the case of a variable-sized image.

	For the first case,
	of an image that is sized as a fraction of the viewport,
	simply provide the target <code>&lt;img></code> size as a percentage,
	followed by a semicolon,
	followed by a comma-separated list of image urls
	<em>and the widths of the images in image pixels</em>.
	Using this information, the browser can determine how wide the <code>&lt;img></code> will end up being,
	and convert the image widths into <em>effective densities</em>.

	<div class='example'>
		For example, say you have an image in two sizes, one 400 pixels wide and one 800 pixels wide.
		If you specified <code class="lang-markup">&lt;img src-1="100%; url1 400, url2 800"></code>,
		and the viewport's width was 320px,
		this is equivalent to specifying <code class="lang-markup">&lt;img src-1="url1 1.25x, url2 2.5x"></code>.

		On the other hand, if the viewport's width was 800px,
		it would be equivalent to specifying <code class="lang-markup">&lt;img src-1="url1 .5x, url2 1x"></code>.

		Regardless of the viewport's size,
		the browser will understand which url is appropriate to download
		without you having to do any of the math yourself.
	</div>

	<div class="example">
		Here's a more complete example,
		with image sizes spanning the full range of appropriate values
		for screens from small phones to large desktop monitors.

		<pre class="lang-markup">
			&lt;img src-1="100%; pic1.png 160, pic2.png 320, pic3.png 640,
			                 pic4.png 1280, pic5.png 2560">
		</pre>

		With this one declaration,
		a high-res phone 320px wide can correctly choose to download <code>pic3.png</code> (an effective 2x resolution),
		while a large desktop screen with 96dpi will correctly choose to download <code>pic4.png</code> (approximately a 1x resolution).
		Anything at higher, lower, or in-between sizes and resolutions will also be appropriately catered for,
		without the author having to explicitly figure out reasonable breakpoints
		and categorize each image appropriately for each.

		Using just Media Queries,
		the markup would instead look something like:

		<pre class="lang-markup" id='bad-example-multisize'>
			&lt;img src-1="(max-width: 400px) pic1.png .5x, pic2.png 1x, pic3.png 2x"
			     src-2="(max-width: 800px) pic2.png .5x, pic3.png 1x, pic4.png 2x"
			     src-3="(max-width: 1600px) pic3.png .5x, pic4.png 1x, pic5.png 2x"
			     src-4="pic4.png .5x, pic5.png 1x">
		</pre>

		This example is obviouslly substantially more verbose,
		and also less powerful.
		For example, when screens reach 3x or 4x density,
		those devices will still be stuck downloading 2x resources,
		even though a 3x or 4x version exists for most screen sizes,
		unless the author comes back and updates every <code>&lt;img></code> element in their page.

		Further, the breakpoints chosen above were simply guessed at,
		and are likely not optimal.
		Doing the math to find the optimal breakpoints isn't hard, but is definitely non-trivial.
	</div>

	For the second case, when the size of the image varies based on breakpoints in your layout,
	the syntax is slightly more complicated.
	The first and second parts are still separated by a semicolon,
	and the second part is still a list of urls and image sizes.

	The syntax of the first part, though, is slightly expanded.
	Rather than being simply an image size,
	it's an alternating list of image sizes and viewport breakpoints,
	with the breakpoints in parentheses to help separate them visually.
	The breakpoints must be in ascending order,
	as the image size is chosen by finding which two breakpoints the viewport's size sits between,
	and selecting the image size between those two.

	<div class='example'>
		For example, say your site had three basic layouts:

		<figure>
			<img src="images/viewport_selection_mob_first.jpg">
			<figcaption>
				Single-column (100%) on small screens,
				two-column (50%) on medium screens,
				and three-column (approximately 33%) on large screens.
			</figcaption>
		</figure>

		Assuming that the same image is supposed to be used at all of these layouts
		(that is, you aren't doing <a>art-direction</a> cropping to optimize the display of the image for a given size),
		then all of these cases can be addressed by a handful of images at various sizes,
		and the following code:

		<pre class="lang-markup">
			&lt;img src-1="100% (30em) 50% (50em) calc(33% - 100px);
			           pic100.png 100, pic200.png 200, pic400.png 400,
			           pic800.png 800, pic1600.png 1600, pic3200.png 3200">
		</pre>

		The first part of this attribute sets up the layout breakpoints at ''30em'' and ''50em'',
		and declares the image sizes between and around these breakpoints to be ''100%'', ''50%'', or ''calc(33% - 100px)''.

		The six images automatically cover every reasonable possibility.
		For small screens (phone size, or even smaller, like watches),
		anything from the 100 pixel wide image to the 800 pixel wide image may be downloaded,
		depending on screen size and density.
		For medium and large screens,
		anything from the 400 pixel wide image and up may be chosen.
		The author doesn't have to do any math or complex figuring,
		just provide the image in enough sizes to cover everything they believe reasonable.

		Again, doing the same thing just with Media Queries is much more verbose.
	</div>

	Note: Notice that the full set of CSS <<length>> values are actually available for image sizes,
	including things like ''calc()''.
	Using this, you can get as close to the precise size that the <code>&lt;img></code> element will be as you wish,
	though just getting “close enough” as I did in these examples is more than sufficient in most cases.
	Similarly, viewport sizes can be specified with the full set of <<length>> values,
	which are interpreted in the same way that they would be in a Media Query like ''min-width''.
	For example, ''em'' units are interpreted relative to the user's default font size, etc.

	Note: Also, all of the examples given here size the various images as powers of 2,
	doubling in size as they get larger.
	This is merely for convenience, as it's easy to downsample an image by powers of 2,
	but is not a limitation -
	feel free to provide images at any size you desire.
	This will become more important in time,
	as 3x screens come into use
	and you wish to give them a well-targeted image to download,
	rather than having to decide between the 2x and 4x versions.

	The intrinsic width of the image is equal to the image size chosen from the provided list.
	If the image has an intrinsic ratio, the intrinsic height of the image is its intrinsic width multiplied by the ratio.
	Otherwise, it has no intrinsic height.

<h2 id='model'>
Processing Model</h2>

	This section describes the processing model for images.

	As each <code>&lt;img></code> element is encountered on the page,
	run the following steps for it:

	<ol>
		<li>
			Let <var>candidates</var> be the result of <a>obtaining the image candidates</a> from the element.

		<li>
			If <var>candidates</var> is empty,
			abort this algorithm.
			<p class='issue'>
				Is this the right place to say "fire a load error" or whatever?

		<li>
			<p class='issue'>
				Update the image data, choose the right candidate, etc, etc, hook up to the right terms in HTML.
				The actual choice is UA-specific.
	</ol>

<h3 id="obtain-candidates">
Obtaining the Image Candidates</h3>

	This section describes how to <dfn title="obtain the image candidates|obtaining the image candidates">obtain the image candidates</dfn>
	from an HTML <code>&lt;img></code> element.

	The input to this algorithm is an HTML <code>&lt;img></code> element.
	The output of this algorithm is a (possibly empty) list of <dfn title="image candidate">image candidates</dfn>,
	where each candidate is a pair composed of a url and a resolution.

	<ol>
		<li>
			Let <var>candidate attributes</var> be the list of attributes on the element who satisfy the following conditions:

			<ul>
				<li>The attribute name is at least 5 characters long.

				<li>The first four characters of the attribute name are an <a spec=css-syntax>ASCII case-insensitive</a> match for "src-".

				<li>The fifth character of the attribute name is a non-zero <a spec=css-syntax>digit</a> (1-9).

				<li>The remaining characters of the attribute name are <a spec=css-syntax>digits</a> (0-9).

				<li>The attribute value matches the <<src-n-attribute>> production.
			</ul>

		<li>
			If <var>candidate attributes</var> is empty,
			return the result of <a>obtaining a candidate from src</a> from the element
			and abort this algorithm.

		<li>
			For each <var>candidate attribute</var>,
			let its <var>index</var> be the result of removing the first four characters from the attribute name,
			and interpreting the remaining characters as a base-10 number.

		<li>
			Sort the <var>candidate attributes</var> by their <var>index</var> in ascending order.

		<li>
			For each <var>candidate attribute</var>:

			<ol>
				<li>
					If the attribute's value contains a media query,
					evaluate that query.
					If it returns true,
					let <var>winning value</var> be the value of this attribute following the media query
					and abort this sub-algorithm.
					Otherwise, if it returns false,
					abort this sub-algorithm.

				<li>
					Otherwise, let <var>winning value</var> be this attribute's value
					and abort this sub-algorithm.
			</ol>

		<li>
			If there is no <var>winning value</var>,
			return the result of <a>obtaining a candidate from src</a> from the element
			and abort this algorithm.

		<li>
			Let <var>image candidates</var> be an initially empty list.

		<li>
			If the <var>winning value</var> conforms to the <<x-based-urls>> production,
			then for each set of values between commas:

			<ol>
				<li>
					Let <var>candidate</var> be an <a>image candidate</a> with its url being the <<url>> from the current set of values.

				<li>
					If the current set of values contains a <<resolution>>,
					let <var>candidate's</var> resolution be that resolution.

				<li>
					Otherwise, let <var>candidate's</var> resolution be ''1x''.

				<li>
					Append <var>candidate</var> to <var>image candidates</var>.
			</ol>

			Return <var>image candidates</var>,
			and abort this algorithm.

		<li>
			Otherwise,
			the <var>winning value</var> conforms to the <<viewport-urls>> production.

		<li>
			Let <var>viewport data</var> be the portion of <var>winning value</var> that conforms to the <<size-viewport-list>> production.
			Let <var>unprocessed candidates</var> be the portion of the <var>winning value</var> that conforms to the <<size-based-urls>> production.

		<li>
			Divide <var>viewport data</var> into adjacent pairs of values,
			and a final lone value.

			For each pair of values in <var>viewport data</var>:

			<ol>
				<li>
					Let <var>candidate viewport width</var> be the result of intepreting the second value as a <<length>>,
					using the same rules as a <<length>> in a ''min-width'' media feature.

				<li>
					If the viewport's width is less than <var>candidate viewport width</var>,
					then:

					<ul>
						<li>
							If the first value is a <<number>>,
							let <var>winning image width</var> be a length equal to that number of pixels.

						<li>
							Otherwise, the first value is a <<percentage>>.
							Let <var>winning image width</var> be a length equal to the given percentage of the viewport's width.
					</ul>

					Abort this sub-algorithm.
			</ol>

		<li>
			For each set of values between commas of <var>unprocessed candidates</var>:

			<ol>
				<li>
					Let <var>candidate</var> be an <a>image candidate</a> with its url being the <<url>> from the current set of values.

				<li>
					Let <var>candidate's</var> resolution be the result of dividing the <<integer>> from the current set of values
					by the <var>winning image width</var>, as an ''x'' unit.

				<li>
					Append <var>candidate</var> to <var>image candidates</var>.
			</ol>

			Return <var>image candidates</var>.
	</ol>

	To <dfn title="obtain a candidate from src|obtaining a candidate from src">obtain a candidate from src</dfn> from an element,
	follow these steps:

	<ol>
		<li>
			If the element has a <code>src</code> attribute,
			return a list consisting of a single <a>image candidate</a>,
			where that candidate's url is the value of the <code>src</code> attribute
			and its resolution is ''1x''.

		<li>
			Otherwise,
			return an empty list.
	</ol>

	<p class='issue'>
		In the event that this proposal "wins",
		but browsers have already shipped "basic" <code>srcset</code>
		(just support for resolution discrimination)
		and uptake is high enough that they can't take it back,
		then we can easily integrate <code>srcset</code> into this fallback behavior.
		In other words, <code>srcset</code> doesn't hurt this proposal
		(though it would be ideal if it didn't exist alongside).
